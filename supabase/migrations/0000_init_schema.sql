
-- Tabela de Perfis de Usuário
CREATE TABLE public.profiles (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    display_name TEXT
);
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
-- Política: Usuários podem ver todos os perfis.
CREATE POLICY "Allow all users to view profiles" ON public.profiles FOR SELECT USING (true);
-- Política: Usuários podem atualizar apenas seu próprio perfil.
CREATE POLICY "Allow user to update their own profile" ON public.profiles FOR UPDATE USING (auth.uid() = id);


-- Tabela de Agendamentos Semanais
CREATE TABLE public.weekly_schedules (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
    day_of_week INT NOT NULL CHECK (day_of_week >= 1 AND day_of_week <= 5),
    week_start_date DATE NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE (user_id, day_of_week, week_start_date)
);
ALTER TABLE public.weekly_schedules ENABLE ROW LEVEL SECURITY;
-- Habilita Realtime na tabela de agendamentos
ALTER PUBLICATION supabase_realtime ADD TABLE public.weekly_schedules;
-- Política: Usuários podem ver todos os agendamentos.
CREATE POLICY "Allow all users to view schedules" ON public.weekly_schedules FOR SELECT USING (true);
-- Política: Usuários podem criar/deletar apenas seus próprios agendamentos.
CREATE POLICY "Allow user to manage their own schedule" ON public.weekly_schedules FOR ALL USING (auth.uid() = user_id);


-- Tabela de Agendamentos Fixos/Persistentes
CREATE TABLE public.persistent_schedules (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
    day_of_week INT NOT NULL CHECK (day_of_week >= 1 AND day_of_week <= 5),
    UNIQUE (user_id, day_of_week)
);
ALTER TABLE public.persistent_schedules ENABLE ROW LEVEL SECURITY;
-- Política: Usuários podem ver todos os agendamentos fixos.
CREATE POLICY "Allow all users to view persistent schedules" ON public.persistent_schedules FOR SELECT USING (true);
-- Política: Usuários podem gerenciar seus próprios agendamentos fixos.
CREATE POLICY "Allow user to manage their own persistent schedule" ON public.persistent_schedules FOR ALL USING (auth.uid() = user_id);


-- Tabela de Logs de Auditoria
CREATE TABLE public.schedule_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
    user_display_name TEXT,
    action TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);
ALTER TABLE public.schedule_logs ENABLE ROW LEVEL SECURITY;
-- Política: Usuários podem ver todos os logs.
CREATE POLICY "Allow all users to view logs" ON public.schedule_logs FOR SELECT USING (true);
-- Política: Apenas código com a service_role (como Edge Functions) pode inserir logs.
CREATE POLICY "Allow service_role to insert logs" ON public.schedule_logs FOR INSERT WITH CHECK (auth.role() = 'service_role');


-- Função para criar perfil de usuário automaticamente após o cadastro
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, display_name)
  VALUES (new.id, new.raw_user_meta_data->>'user_name');
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger para executar a função acima em novos cadastros
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();
