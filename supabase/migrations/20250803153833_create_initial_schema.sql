
-- Tabela de Perfis de Usuário
CREATE TABLE public.profiles (
    id uuid NOT NULL REFERENCES auth.users ON DELETE CASCADE,
    display_name TEXT,
    PRIMARY KEY (id)
);
-- Função para criar um perfil automaticamente ao criar um novo usuário
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO public.profiles (id, display_name)
    VALUES (new.id, new.raw_user_meta_data->>'user_name');
    RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
-- Gatilho que chama a função acima
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- Tabela de Agendamentos Semanais
CREATE TABLE public.weekly_schedules (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES public.profiles ON DELETE CASCADE,
    day_of_week INT NOT NULL CHECK (day_of_week >= 1 AND day_of_week <= 5),
    week_start_date DATE NOT NULL,
    created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE (user_id, day_of_week, week_start_date)
);

-- Tabela de Agendamentos Fixos
CREATE TABLE public.persistent_schedules (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES public.profiles ON DELETE CASCADE,
    day_of_week INT NOT NULL CHECK (day_of_week >= 1 AND day_of_week <= 5),
    UNIQUE (user_id, day_of_week)
);

-- Tabela de Logs de Auditoria
CREATE TABLE public.schedule_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid REFERENCES public.profiles ON DELETE SET NULL,
    user_display_name TEXT,
    action TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Habilitar Row Level Security (RLS) para todas as tabelas
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.weekly_schedules ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.persistent_schedules ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.schedule_logs ENABLE ROW LEVEL SECURITY;

-- Políticas de Segurança (RLS)
-- Perfis: Usuários podem ver todos os perfis, mas só podem atualizar o seu.
CREATE POLICY "Allow all users to view profiles" ON public.profiles FOR SELECT USING (true);
CREATE POLICY "Allow user to update their own profile" ON public.profiles FOR UPDATE USING (auth.uid() = id);

-- Agendamentos Semanais: Usuários podem ver todos os agendamentos, mas só podem criar/deletar os seus.
CREATE POLICY "Allow all users to view weekly schedules" ON public.weekly_schedules FOR SELECT USING (true);
CREATE POLICY "Allow user to manage their own weekly schedule" ON public.weekly_schedules FOR ALL USING (auth.uid() = user_id);

-- Agendamentos Fixos: Usuários podem ver todos, mas só gerenciar os seus.
CREATE POLICY "Allow all users to view persistent schedules" ON public.persistent_schedules FOR SELECT USING (true);
CREATE POLICY "Allow user to manage their own persistent schedule" ON public.persistent_schedules FOR ALL USING (auth.uid() = user_id);

-- Logs: Todos os usuários podem ver todos os logs. A inserção será feita via funções de borda ou triggers no futuro.
CREATE POLICY "Allow all users to view schedule logs" ON public.schedule_logs FOR SELECT USING (true);

-- Habilitar Realtime na tabela de agendamentos
ALTER PUBLICATION supabase_realtime ADD TABLE public.weekly_schedules;

